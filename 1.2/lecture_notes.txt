1.2.2  Tree Recursion

You can see that Fib(2) expands to 2 leaves. Fib(1) expands to just 1. Clearly, Fib(3) is the sum of the leaves taken from Fib(2), which is 2, and Fib(1), which is 1. We can see that their sum is the value of Fib(4). We see that the values are shifted in this case, but the counting process remains the same, the number of leaves on the n-th step is Fib(n+1).

Note: there's a more detailed proof by math induction. All you have to do is to prove the base case and then move on to the induction step.

1.2.3  Orders of Growth

A pretty clear explanation is given in wikipedia:
https://en.wikipedia.org/wiki/Big_O_notation#Example


Exercise 1.15:

To understand the trigonometric stuff, see this notions here:

"There are many easy ways, but since you probably know the formulas for the sine and cosine of 2x and of a+b, just use those formulas on 3x = 2x + x"

http://mathcentral.uregina.ca/QQ/database/QQ.09.99/sara1.html

Also, see this one for an explanation why sin x = x when x is small:

http://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/1.-differentiation/part-a-definition-and-basic-rules/session-8-limits-of-sine-and-cosine/MIT18_01SCF10_Ses8a.pdf

And this wikipedia article on angle sum and difference identities:

https://en.wikipedia.org/wiki/List_of_trigonometric_identities


See the nice visual proof of Fermat's Little Theorem here:
https://www.youtube.com/watch?v=OoQ16YCYksw

Along with the primality test:
https://www.youtube.com/watch?v=oUMotDWVLpw

And notes on module (or congruence):
https://www.youtube.com/watch?v=3QnD2c4Xovk

Along with notes on modular arithmetic:
https://en.wikipedia.org/wiki/Modular_arithmetic

And here (by counting necklaces):
https://en.wikipedia.org/wiki/Proofs_of_Fermat%27s_little_theorem


The Fermat test

A number can be represented in the following way:

a = x*n + rem(a/n)
b = y*n + rem(b/n)

where rem is the remainder of a divided by n

Then

rem(a*b/n) = rem((x*n + rem(a/n))(y*n + rem(b/n))/n) = 
= rem(x*n*y*n/n) + rem(x*n*rem(b/n)/n) + rem(y*n*rem(a/n)/n) + rem(rem(a/n)*rem(b/n)/n)

rem(x*n*y*n/n) = 0       as x*n*y*n divides by n
rem(x*n*rem(b/n)/n) = 0  as x*n*rem(b/n) divides by n as rem(b/n) is an integer
rem(y*n*rem(a/n)/n) = 0  as y*n*rem(a/n) divides by n as rem(a/n) is an integer

The only one term is left: 

rem(rem(a/n)*rem(b/n)/n)

Then the initial equation can be reduced to the following:

rem(a*b/n) = rem(rem(a/n)*rem(b/n)/n)

Let's test it

a = 9
b = 8
n = 5

rem(9*8/5) = rem(72/5) = 2
rem(9*8/5) = rem(rem(9/5)*rem(8/5)/5) = rem(4*3/5) = rem(12/5) = 2


Note: as mentioned here, 

https://stackoverflow.com/questions/2852249/can-you-execute-multiple-statements-in-an-if-statement

"You can't use multiple statements with if, except with progn as posted above. But there is the cond form"

but

"you could also use the (begin exp1 exp2...) syntax to evaluate more than one expression"

Also see progn in common lisp.

