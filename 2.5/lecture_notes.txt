2.5.1  Generic Arithmetic Operations

We will need to replace the get and put functions that were defined before

(define get 2d-get)
(define put 2d-put!)

with the following ones:

(define *op-table* (make-hash-table))

(define (put op type proc)
  (hash-table/put! *op-table* (list op type) proc))

(define (get op type)
  (hash-table/get *op-table* (list op type) #f))

It is done because we get an error when we try to evaluate an expression like this:

(get 'magnitude '(complex))

Whereas the following one would be evaluated just fine with the old get and put procedures:

(get 'magnitude 'complex)

The old implementations would complain when providing list arguments to them.


Note that the put-coercion and get-coercion procedures are similar to put and get:

(define *coercion-table* (make-equal-hash-table)) 

(define (put-coercion type1 type2 proc) 
  (hash-table/put! *coercion-table* (list type1 type2) proc)) 
  
(define (get-coercion type1 type2) 
  (hash-table/get *coercion-table* (list type1 type2) '())) 

(taken from http://community.schemewiki.org/?sicp-ex-2.82).


