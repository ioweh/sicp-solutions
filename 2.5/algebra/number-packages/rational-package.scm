(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (if (and (integer? n) (integer? d)) (gcd n d) 1)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
		 (* (numer y) (denom x)))
	      (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
		 (* (numer y) (denom x)))
	      (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
	      (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
	      (* (denom x) (numer y))))
  (define (equal-rat? x y)
    (equ? (* (numer x) (denom y))
       (* (numer y) (denom x))))
  (define (=zero? x) (equ? (numer x) 0))
  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'equ? '(rational rational) equal-rat?)
  (put '=zero? '(rational) =zero?)
  (put 'sine '(rational)
       (lambda (x) (tag (sin (/ (numer x) (denom x))))))
  (put 'cosine '(rational)
       (lambda (x) (tag (cos (/ (numer x) (denom x))))))
  (put 'square '(rational)
       (lambda (x) (tag (square (/ (numer x) (denom x))))))
  (put 'sqrt '(rational)
       (lambda (x) (tag (sqrt (/ (numer x) (denom x))))))
  (put 'atan '(rational)
       (lambda (x) (tag (atan (/ (numer x) (denom x))))))
  (put 'negate '(rational)
       (lambda (r) (tag (make-rat (- (numer r)) (denom r)))))
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))
