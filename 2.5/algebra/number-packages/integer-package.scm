(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (define (integer->rational n)
    (make-rational n 1))
  (define square-compiled square)
  (define sqrt-compiled sqrt)
  (define atan-compiled atan)
  (define zero 0)
  (put 'add '(scheme-number scheme-number) +)
  (put 'sub '(scheme-number scheme-number) -)
  (put 'mul '(scheme-number scheme-number) *)
  (put 'div '(scheme-number scheme-number) /)
  (put 'equ? '(scheme-number scheme-number) =)
  (put 'sine '(scheme-number)
       (lambda (x) (sin x)))
  (put 'cosine '(scheme-number)
       (lambda (x) (cos x)))
  (put '=zero? '(scheme-number)
       (lambda (x) (= x zero)))
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  (put 'square '(scheme-number)
       (lambda (x) (square-compiled x)))
  (put 'sqrt '(scheme-number)
       (lambda (x) (sqrt-compiled x)))
  (put 'atan '(scheme-number)
       (lambda (x) (atan-compiled x)))
  (put 'negate '(scheme-number)
       (lambda (x) (- x)))
  (put 'raise '(scheme-number) integer->rational)
  'done)

(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))
